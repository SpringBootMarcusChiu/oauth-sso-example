resource-server.api.url=http://localhost:8081/sso-resource-server/api/foos/

# LOGGING - display logging open id network
logging.level.org.springframework.web.client.RestTemplate=DEBUG


# SPRING PROPERTIES FOR OAUTH 2.0
# spring.security.oauth2.client.registration.{registration-id} is the root namespace for registering a client
# We defined a client with registration id `custom`, which we then defined its:
# - client-id
# - client-secret
# - scope
# - authorization-grant-type
# - redirect-uri

# spring.security.oauth2.client.provider.{registration-id}.
# - authorization-uri=http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/auth
# - token-uri=http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token
# - user-info-uri=http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/userinfo
# - user-name-attribute=preferred_username



# GOOGLE DEFAULT CONFIGURATION
# the following 2 properties are set in $HOME/.spring-boot-devtools.properties
# spring.security.oauth2.client.registration.{registration-id}.client-id # registration-id = google
spring.security.oauth2.client.registration.google.client-id=<google client id>
spring.security.oauth2.client.registration.google.client-secret=<google client secret>
#spring.security.oauth2.client.registration.google.scope=profile
#spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
# By default, Spring Boot configures this redirect URI as /login/oauth2/code/{registration-id}
#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8082/login/oauth2/code/google



# OTHER DEFAULT CONFIGURATIONS (Facebook, GitHub & Okta)
# - the Spring Security project contains default configurations for:
#   - Google
#   - Facebook
#   - GitHub
#   - Okta
# - These default configurations provide all the necessary information for authentication,
#   which is what allows us to only enter the client credentials
spring.security.oauth2.client.registration.facebook.client-id=<facebook client id>
spring.security.oauth2.client.registration.facebook.client-secret=<facebook client secret>

spring.security.oauth2.client.registration.github.client-id=<github client id>
spring.security.oauth2.client.registration.github.client-secret=<github client secret>

spring.security.oauth2.client.registration.okta.client-id=<okta client id>
spring.security.oauth2.client.registration.okta.client-secret=<okta client secret>
# okta requires both auth-uri & token-uri
spring.security.oauth2.client.provider.okta.authorization-uri=<okta auth uri>
spring.security.oauth2.client.provider.okta.token-uri=<okta token uri>



# OTHER NON-DEFAULT CONFIGURATIONS
# - If we want to use a different authentication provider not configured in Spring Security,
#   we'll need to define the full configuration, with information such as authorization URI
#   and token URI. Hereâ€˜s a look at the default configurations in Spring Security to have an
#   idea of the properties needed: https://github.com/spring-projects/spring-security/blob/master/config/src/main/java/org/springframework/security/config/oauth2/client/CommonOAuth2Provider.java

spring.security.oauth2.client.registration.custom.client-id=ssoClient-1
spring.security.oauth2.client.registration.custom.client-secret=ssoClientSecret-1
spring.security.oauth2.client.registration.custom.scope=read,write
spring.security.oauth2.client.registration.custom.authorization-grant-type=authorization_code
# By default, Spring Boot configures this redirect URI as /login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.custom.redirect-uri=http://localhost:8082/login/oauth2/code/custom

# spring.security.oauth2.client.provider is where we define Authorization Servers
# We defined a provider/auth-server with id `custom`, which we then define the URIs
# the framework does the entire logging-in process, including redirection to Keycloak, seamlessly for us
spring.security.oauth2.client.provider.custom.authorization-uri=http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/auth
spring.security.oauth2.client.provider.custom.token-uri=http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token
spring.security.oauth2.client.provider.custom.user-info-uri=http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.custom.user-name-attribute=preferred_username



# PROVIDERS/AUTH-SERVERS
# - OP = OpenID Provider
# - spring.security.oauth2.client.provider is where we define Authorization Servers
# - We defined a provider/auth-server with id `custom`, which we then define the URIs
#   the framework does the entire logging-in process, including redirection to Keycloak, seamlessly for us
# - Spring Support for OIDC Discovery Endpoint
#   - optional in OIDC. Hence, it's important to understand that there might be OPs that don't support them
#   - The specification defines a Discovery mechanism for an RP to discover the OP and obtain information
#     needed to interact with it
#   - OPs provides a JSON document of standard metadata on /.well-known/openid-configuration
#     e.g. https://accounts.google.com/.well-known/openid-configuration
#   - check the logs to confirm the application is calling the discovery endpoint in the startup process
#   - if the Discovery endpoint is not available at the time the service launches, then our
#     app won't be able to complete the startup process successfully
spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com
