spring:
  security:
    oauth2:
      client:
        # spring.security.oauth2.client.registration is the root namespace for registering a client
        # We defined a client with registration id `custom`, which we then defined its:
        # - client-id
        # - client-secret
        # - scope
        # - authorization-grant-type
        # - redirect-uri
        registration:
          custom:
            client-id: ssoClient-1
            client-secret: ssoClientSecret-1
            scope: read,write
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8082/ui-one/login/oauth2/code/custom
        # spring.security.oauth2.client.provider is where we define Authorization Servers
        # We defined a provider/auth-server with id `custom`, which we then define the URIs
        # the framework does the entire logging-in process, including redirection to Keycloak, seamlessly for us
        provider:
          custom:
            authorization-uri: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/auth
            token-uri: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token
            user-info-uri: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/userinfo
            user-name-attribute: preferred_username
  thymeleaf:
    cache: false
  cache:
    type: NONE
    
server: 
  port: 8082
  servlet: 
    context-path: /ui-one
    
logging: 
  level: 
    org.springframework: INFO

resourceserver:
  api:
    url: http://localhost:8081/sso-resource-server/api/foos/
              
